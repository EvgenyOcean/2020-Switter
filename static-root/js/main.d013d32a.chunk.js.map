{"version":3,"sources":["context.js","components/CreateTweetForm.js","components/Tweet.js","components/Profile.js","pages/Home.js","pages/Detail.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","React","createContext","UserContextProvider","props","state","dataset","username","canTweet","page","tweetId","feedOwner","value","tweets","handleRetweet","bind","handleTweetAdd","handleLikeClick","handleTextArea","endpoint","this","fetch","then","response","ok","json","Error","data","Array","isArray","setState","catch","err","console","log","message","e","preventDefault","content","method","headers","getCookie","body","JSON","stringify","newTweet","id","action","length","updatingTweet","find","tweet","likes","user_liked","original","newLikes","deepStateTweetsCopy","parse","currentTweet","tweetsContainsOriginal","filter","tweetContainsOriginal","target","Provider","children","Component","name","cookieValue","document","cookie","cookies","split","i","trim","substring","decodeURIComponent","CreateTweetForm","Row","Col","xs","lg","className","Form","onSubmit","Group","controlId","Label","Control","as","rows","onChange","Button","variant","type","StyledButton","styled","Tweet","ButtonGroup","aria-label","onClick","Profile","Home","useContext","map","key","login","Container","Detail","Navbar","App","componentToRender","Boolean","window","location","hostname","match","homePage","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"yRAEaA,EAAcC,IAAMC,gBA+OlBC,E,kDA5Ob,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,QAAS,CACPC,SAAUH,EAAMG,SAChBC,SAAUJ,EAAMI,SAChBC,KAAML,EAAMK,KACZC,QAASN,EAAMM,QACfC,UAAWP,EAAMO,WAEnBC,MAAO,GACPC,OAAQ,IAEV,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBACvB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBAhBN,E,gEAmBE,IAAD,OAEbI,EAAW,cAEXC,KAAKf,MAAMC,QAAQC,SAEjBa,KAAKf,MAAMC,QAAQK,UACrBQ,GAAQ,qBAAkBC,KAAKf,MAAMC,QAAQK,WAE7CQ,GAAQ,qBAAkBC,KAAKf,MAAMC,QAAQC,UAEtCa,KAAKf,MAAMC,QAAQI,UAE5BS,GAAQ,WAAQC,KAAKf,MAAMC,QAAQI,UAGrCW,MAAMF,GACHG,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,4BAGnBJ,MAAK,SAAAK,GAECC,MAAMC,QAAQF,GAGjB,EAAKG,SAAS,CAACjB,OAAQc,IAFvB,EAAKG,SAAS,CAACjB,OAAQ,CAACc,QAK3BI,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAIG,c,qCAMPC,GAAG,IAAD,OACfA,EAAEC,iBACF,IAAIV,EAAO,CAACW,QAASlB,KAAKf,MAAMO,OAChCS,MAAM,wBAAyB,CAC7BkB,OAAQ,OACRC,QAAS,CACP,sBAAyB,iBACzB,mBAAoB,iBACpB,cAAeC,EAAU,aACzB,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUjB,KACpBL,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,4BAGnBJ,MAAK,SAAAuB,GACJ,IAAIhC,EAAM,CAAIgC,GAAJ,mBAAiB,EAAKxC,MAAMQ,SACtC,EAAKiB,SAAS,CAACjB,SAAQD,MAAO,QAG/BmB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,oCAMJc,GAAI,IAAD,OAEfzB,MAAM,4BAAD,OAA6ByB,GAAM,CACtCP,OAAQ,OACRC,QAAS,CACP,sBAAyB,iBACzB,mBAAoB,iBACpB,cAAeC,EAAU,aACzB,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACG,OATX,cAUVzB,MAAK,SAAAC,GACN,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,4BAEjBJ,MAAK,SAAAuB,GAEN,GAAI,EAAKxC,MAAMQ,OAAOmC,OAAS,GAC3B,EAAK3C,MAAMC,QAAQK,YAAc,EAAKN,MAAMC,QAAQC,SAAS,CAC/D,IAAIM,EAAM,CAAIgC,GAAJ,mBAAiB,EAAKxC,MAAMQ,SACtC,EAAKiB,SAAS,CAACjB,gBAGfoB,QAAQC,IAAI,wCAEbH,OAAM,SAAAC,GACPC,QAAQC,IAAIF,Q,sCAIAc,GAAI,IAGdC,EACAE,EAJa,OAKb7B,KAAKf,MAAMQ,OAAOmC,OAAS,EAC7BD,EAAS3B,KAAKf,MAAMQ,OAAOqC,MAAK,SAAAC,GAAK,OAAIA,EAAML,KAAOA,KAAIM,MAAMC,WAAa,UAAY,OAGrFjC,KAAKf,MAAMQ,OAAO,GAAGiC,KAAOA,GAE9BC,EAAS3B,KAAKf,MAAMQ,OAAO,GAAGuC,MAAMC,WAAa,UAAY,OAC7DJ,EAAgB,SAGhBF,EAAS3B,KAAKf,MAAMQ,OAAO,GAAGyC,SAASF,MAAMC,WAAa,UAAY,OACtEJ,EAAgB,YAKpB5B,MAAM,4BAAD,OAA6ByB,GAAM,CACtCP,OAAQ,OACRC,QAAS,CACP,sBAAyB,iBACzB,mBAAoB,iBACpB,cAAeC,EAAU,aACzB,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACG,aACrBzB,MAAK,SAAAC,GACN,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,4BAEjBJ,MAAK,SAAAK,GAEN,IAAI4B,EAAW5B,EAAKyB,MAGhBI,EAAsBb,KAAKC,UAAU,EAAKvC,MAAMQ,QAIpD,GAHA2C,EAAsBb,KAAKc,MAAMD,GAGD,WAA5B,EAAKnD,MAAMC,QAAQG,KASrB,MARsB,SAAlBwC,GACFO,EAAoB,GAAGJ,MAAMA,MAAQG,EACrCC,EAAoB,GAAGJ,MAAMC,YAAcG,EAAoB,GAAGJ,MAAMC,aAExEG,EAAoB,GAAGF,SAASF,MAAMA,MAAQG,EAC9CC,EAAoB,GAAGF,SAASF,MAAMC,YAAcG,EAAoB,GAAGF,SAASF,MAAMC,iBAE5F,EAAKvB,SAAS,CAACjB,OAAQ2C,IAKzB,IAAIE,EAAeF,EAAoBN,MAAK,SAAAC,GAAK,OAAIA,EAAML,KAAOA,KAGlEY,EAAaN,MAAMA,MAAQG,EAC3BG,EAAaN,MAAMC,YAAcK,EAAaN,MAAMC,WAKpD,IAAIM,EAAyBH,EAAoBI,QAAO,SAAAT,GACtD,GAAIA,EAAMG,SACR,OAAOH,EAAMG,SAASR,KAAOA,KAKjC,GAAIa,EAAuB,CAAC,IAAD,gBACSA,GADT,IACzB,2BAAyD,CAAC,IAAjDE,EAAgD,QACvDA,EAAsBP,SAASF,MAAMA,MAAQG,EAC7CM,EAAsBP,SAASF,MAAMC,YAAcQ,EAAsBP,SAASF,MAAMC,YAHjE,+BAQ3B,EAAKvB,SAAS,CAACjB,OAAQ2C,OAGtBzB,OAAM,SAAAC,GACPC,QAAQC,IAAIF,Q,qCAIDI,GACb,IAAIxB,EAAQwB,EAAE0B,OAAOlD,MACrBQ,KAAKU,SAAS,CAAClB,Y,+BAIf,OAGE,kBAACZ,EAAY+D,SAAb,CACEnD,MAAK,2BACAQ,KAAKf,OADL,IAEHY,gBAAiBG,KAAKH,gBACtBD,eAAgBI,KAAKJ,eACrBF,cAAeM,KAAKN,cACpBI,eAAgBE,KAAKF,kBAItBE,KAAKhB,MAAM4D,c,GAvOc/D,IAAMgE,WAiPxC,SAASxB,EAAUyB,GACjB,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE5B,IADA,IAAMC,EAAUF,SAASC,OAAOE,MAAM,KAC7BC,EAAI,EAAGA,EAAIF,EAAQtB,OAAQwB,IAAK,CACrC,IAAMH,EAASC,EAAQE,GAAGC,OAE1B,GAAIJ,EAAOK,UAAU,EAAGR,EAAKlB,OAAS,KAAQkB,EAAO,IAAM,CACvDC,EAAcQ,mBAAmBN,EAAOK,UAAUR,EAAKlB,OAAS,IAChE,OAIZ,OAAOmB,E,iCCnOMS,MAvBf,SAAyBxE,GACvB,IAAIQ,EAAQR,EAAMQ,MAClB,OACE,kBAACiE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,UAAU,qBAC5B,kBAACC,EAAA,EAAD,CAAMC,SAAU/E,EAAMY,gBACpB,kBAACkE,EAAA,EAAKE,MAAN,CAAYC,UAAU,gCACpB,kBAACH,EAAA,EAAKI,MAAN,0BACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,GAAG,WAAWC,KAAK,IAAI7E,MAAOA,EAAO8E,SAAU,SAACtD,GAG5DhC,EAAMc,eAAekB,OAGzB,kBAACuD,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,UAA/B,c,6HCqBV,IAAMC,EAAeC,YAAOJ,IAAPI,CAAH,KAIHC,EAvCf,SAAe5F,GAEb,IAAI+C,EAAQ/C,EAAM+C,MACdG,EAAWlD,EAAM+C,MAAMG,SAE3B,OACE,kBAACwB,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,UAAU,2CAC5B,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,QAAd,iBACC9B,EAAML,GAFT,OAEiBK,EAAMb,QAEpBgB,GAAY,yBAAK2B,UAAU,kDAC1B,yBAAKA,UAAU,cACb,wBAAIA,UAAU,QAAd,kBACC3B,EAAShB,SAEZ,kBAAC2D,EAAA,EAAD,CAAaC,aAAW,iBACtB,kBAACJ,EAAD,CAAcF,QAAStC,EAASF,MAAMC,WAAa,OAAS,UAAW8C,QAAS,WAC9E/F,EAAMa,gBAAgBqC,EAASR,MADjC,QAESQ,EAASF,MAAMA,OACxB,kBAAC0C,EAAD,CAAcF,QAAQ,UAAUO,QAAS/F,EAAMU,cAAcC,KAAK,KAAMuC,EAASR,KAAjF,cAKN,kBAACmD,EAAA,EAAD,CAAaC,aAAW,iBACtB,kBAACJ,EAAD,CAAcF,QAASzC,EAAMC,MAAMC,WAAa,OAAS,UAAW8C,QAAS,WAAK/F,EAAMa,gBAAgBkC,EAAML,MAA9G,QAA0HK,EAAMC,MAAMA,OACtI,kBAAC0C,EAAD,CAAcF,QAAQ,UAAUO,QAAS/F,EAAMU,cAAcC,KAAK,KAAMoC,EAAML,KAA9E,eCnBKsD,MAZf,SAAiBhG,GACf,IAAIG,EAAWH,EAAMG,SAErB,OADA0B,QAAQC,IAAI3B,GAEV,kBAACsE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,UAAU,gCAA9B,wBAC6B,0BAAMA,UAAU,cAAc1E,M,QCqClD8F,MAtCf,SAAcjG,GAAQ,IAAD,EAKfkG,qBAAWtG,GAHbM,EAFiB,EAEjBA,QAASW,EAFQ,EAERA,gBACTH,EAHiB,EAGjBA,cAAeE,EAHE,EAGFA,eACfE,EAJiB,EAIjBA,eAAgBN,EAJC,EAIDA,MAAOC,EAJN,EAIMA,OAGrByB,EACF,oCACE,kBAAC,EAAD,CAAS/B,SAAUD,EAAQC,WACL,SAArBD,EAAQE,UACT,kBAAC,EAAD,CACEI,MAAOA,EACPM,eAAgBA,EAChBF,eAAgBA,IAElB,kBAAC6D,EAAA,EAAD,KACGhE,EAAO0F,KAAI,SAAApD,GAAK,OACf,kBAAC,EAAD,CACEqD,IAAKrD,EAAML,GACXK,MAAOA,EACPrC,cAAeA,EACfG,gBAAiBA,SAOvBwF,EAAQ,6GAEZ,OACE,kBAACC,EAAA,EAAD,KACGpG,EAAQC,SAAW+B,EAAUmE,ICrBrBE,MAlBf,SAAgBvG,GAAQ,IAAD,EAKjBkG,qBAAWtG,GAFba,EAHmB,EAGnBA,OAAQC,EAHW,EAGXA,cACRG,EAJmB,EAInBA,gBAWF,OARAgB,QAAQC,IAAIrB,EAAO,IAEJA,EAAOmC,OAAS,kBAAC,EAAD,CAC7BG,MAAOtC,EAAO,GACdC,cAAeA,EACfG,gBAAiBA,IACd,yCCPQ2F,MARf,SAAgBxG,GACd,OACE,yBAAK6E,UAAU,wBAAf,sBCcW4B,MAZf,SAAazG,GAAQ,IAEf0G,EAA6B,WADTR,qBAAWtG,GAA9BM,QAAUG,KAC6B,kBAAC,EAAD,MAAa,kBAAC,EAAD,MAEzD,OACE,oCACE,kBAAC,EAAD,MACCqG,ICDaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,IAAIC,EAAWhD,SAASiD,eAAe,QAEvCC,IAASC,OACP,kBAAC,EAAwBH,EAAS9G,QAChC,kBAAC,EAAD,OAEF8G,GDkHI,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBpG,MAAK,SAAAqG,GACJA,EAAaC,gBAEd7F,OAAM,SAAA8F,GACL5F,QAAQ4F,MAAMA,EAAM1F,c","file":"static/js/main.d013d32a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const UserContext = React.createContext();\r\n\r\nclass UserContextProvider extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      dataset: {\r\n        username: props.username, \r\n        canTweet: props.canTweet,\r\n        page: props.page,\r\n        tweetId: props.tweetId,\r\n        feedOwner: props.feedOwner\r\n      },\r\n      value: '', //maybe later on value will be somewhere else ? \r\n      tweets: [],\r\n    }\r\n    this.handleRetweet = this.handleRetweet.bind(this);\r\n    this.handleTweetAdd = this.handleTweetAdd.bind(this);\r\n    this.handleLikeClick = this.handleLikeClick.bind(this);\r\n    this.handleTextArea = this.handleTextArea.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    // so by default im fetching all the tweets\r\n    let endpoint = '/api/tweets';\r\n\r\n    if (this.state.dataset.username){\r\n      // if django passes username\r\n      if (this.state.dataset.feedOwner){\r\n        endpoint += `/?username=${this.state.dataset.feedOwner}`;\r\n      }else{\r\n        endpoint += `/?username=${this.state.dataset.username}`;\r\n      }\r\n    } else if (this.state.dataset.tweetId){\r\n      // if django passes tweetid\r\n      endpoint += `/${this.state.dataset.tweetId}`;\r\n    }\r\n\r\n    fetch(endpoint)\r\n      .then(response => {\r\n        if (response.ok){\r\n          return response.json()\r\n        } else {\r\n          throw new Error('Something went wrong!');\r\n        }\r\n      })\r\n      .then(data => {\r\n        // the condition below will be met, if detailed view requested a tweet\r\n        if (!Array.isArray(data)){\r\n          this.setState({tweets: [data]});\r\n        } else {\r\n          this.setState({tweets: data});\r\n        };\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message);\r\n      })\r\n  }\r\n\r\n  //basically it's a form, so you could have used FormData\r\n  //but it's just a field, so json is okay\r\n  handleTweetAdd(e){\r\n    e.preventDefault(); \r\n    let data = {content: this.state.value};\r\n    fetch('/api/tweets/add-tweet', {\r\n      method: \"POST\", \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        'X-CSRFToken': getCookie('csrftoken'),\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    }).then(response => {\r\n        if (response.ok){\r\n          return response.json()\r\n        }else{\r\n          throw new Error('Something went wrong!');\r\n        }\r\n      })\r\n      .then(newTweet => {\r\n        let tweets = [newTweet, ...this.state.tweets];\r\n        this.setState({tweets, value: ''});\r\n        // dispatch({action: 'adding new tweet', newTweet});\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  // you need to fix that, cuz when you're retweing someone else's tweets \r\n  // they're prepending to someone else's feed which is bad\r\n  handleRetweet(id){\r\n    let action = 'retweet';\r\n    fetch(`/api/tweets/tweet-action/${id}`, {\r\n      method: \"POST\", \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        'X-CSRFToken': getCookie('csrftoken'),\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({action}), \r\n    }).then(response => {\r\n      if (response.ok){\r\n        return response.json()\r\n      }else {\r\n        throw new Error('something went wrong!');\r\n      }\r\n    }).then(newTweet => {\r\n      // what it means is we need to prepend new retweet only if its user's own feed\r\n      if (this.state.tweets.length > 1 && \r\n          this.state.dataset.feedOwner === this.state.dataset.username){\r\n        let tweets = [newTweet, ...this.state.tweets];\r\n        this.setState({tweets});\r\n      } else {\r\n        // paste a message that the tweet was retweeted; \r\n        console.log('Tweet was successfully retweeted!');\r\n      }\r\n    }).catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  handleLikeClick(id){\r\n    // toDo: I should consider reduce the amount of if state and make a solid single logic\r\n    // works if we have all the tweets in the state\r\n    let action; \r\n    let updatingTweet; \r\n    if (this.state.tweets.length > 1){\r\n      action = this.state.tweets.find(tweet => tweet.id === id).likes.user_liked ? 'dislike' : 'like';\r\n    } else {\r\n      // we have only one tweet in the state\r\n      if (this.state.tweets[0].id === id){\r\n        // liking the main tweet\r\n        action = this.state.tweets[0].likes.user_liked ? 'dislike' : 'like';\r\n        updatingTweet = 'main';\r\n      } else {\r\n        // liking the parent tweet\r\n        action = this.state.tweets[0].original.likes.user_liked ? 'dislike' : 'like';\r\n        updatingTweet = 'original';\r\n      }\r\n    }\r\n\r\n\r\n    fetch(`/api/tweets/tweet-action/${id}`, {\r\n      method: \"POST\", \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        'X-CSRFToken': getCookie('csrftoken'),\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({action}), \r\n    }).then(response => {\r\n      if (response.ok){\r\n        return response.json()\r\n      }else {\r\n        throw new Error('something went wrong!');\r\n      }\r\n    }).then(data => {\r\n      // data => the amount of new likes\r\n      let newLikes = data.likes; \r\n\r\n      // [!] need a deep copy of the state, because we will change the amount of likes right in the object\r\n      let deepStateTweetsCopy = JSON.stringify(this.state.tweets);\r\n      deepStateTweetsCopy = JSON.parse(deepStateTweetsCopy);\r\n\r\n      // if there's only one tweet in the state, there's nothing left to update but itself\r\n      if (this.state.dataset.page === 'detail'){\r\n        if (updatingTweet === 'main'){\r\n          deepStateTweetsCopy[0].likes.likes = newLikes; \r\n          deepStateTweetsCopy[0].likes.user_liked = !deepStateTweetsCopy[0].likes.user_liked; \r\n        } else {\r\n          deepStateTweetsCopy[0].original.likes.likes = newLikes; \r\n          deepStateTweetsCopy[0].original.likes.user_liked = !deepStateTweetsCopy[0].original.likes.user_liked; \r\n        }\r\n        this.setState({tweets: deepStateTweetsCopy})\r\n        return;\r\n      }\r\n\r\n      // find the tweet, likes amount of which, are being changed\r\n      let currentTweet = deepStateTweetsCopy.find(tweet => tweet.id === id);\r\n\r\n      // changing original tweet\r\n      currentTweet.likes.likes = newLikes; \r\n      currentTweet.likes.user_liked = !currentTweet.likes.user_liked;\r\n\r\n      // but that's not it, cuz above we just handle the original tweet like changing, \r\n      // but what if that tweet was retweeted, then the tweet also can be found at a_tweet.original \r\n      // and we need to update the UI there as well; anyway the id is the same, so it's easy to do:\r\n      let tweetsContainsOriginal = deepStateTweetsCopy.filter(tweet => {\r\n        if (tweet.original){\r\n          return tweet.original.id === id;\r\n        }\r\n      });\r\n\r\n      // oh yeah... it can be retweeted multiple times, so changing it everywhere; \r\n      if (tweetsContainsOriginal){\r\n        for (let tweetContainsOriginal of tweetsContainsOriginal){\r\n          tweetContainsOriginal.original.likes.likes = newLikes; \r\n          tweetContainsOriginal.original.likes.user_liked = !tweetContainsOriginal.original.likes.user_liked; \r\n        }\r\n      }\r\n\r\n      // finally, rerendering the updated tweets\r\n      this.setState({tweets: deepStateTweetsCopy})\r\n      // dispatch({action: 'fetching tweets', tweets: deepStateTweetsCopy});\r\n\r\n    }).catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  handleTextArea(e){\r\n    let value = e.target.value; \r\n    this.setState({value});\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      // so, basically value={{...this.state}} doesn't make a deep copy, \r\n      // but the good thing is Im not changing state anywhere else but here\r\n      <UserContext.Provider \r\n        value={{\r\n          ...this.state, \r\n          handleLikeClick: this.handleLikeClick, \r\n          handleTweetAdd: this.handleTweetAdd, \r\n          handleRetweet: this.handleRetweet, \r\n          handleTextArea: this.handleTextArea,\r\n        }}\r\n      >\r\n\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserContextProvider;\r\n\r\n\r\n// OTHER FUNCTIONS, ALSO GOOD FOR UTILS AND STUFF\r\nfunction getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n          const cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}","import React from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\nfunction CreateTweetForm(props) {\r\n  let value = props.value; \r\n  return (\r\n    <Row>\r\n      <Col xs={10} lg={8} className=\"mx-auto mb-5 px-0\">\r\n        <Form onSubmit={props.handleTweetAdd}>\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>Create New Tweet:</Form.Label>\r\n            <Form.Control as=\"textarea\" rows=\"3\" value={value} onChange={(e)=>{\r\n              // let value = e.target.value; \r\n              // dispatch({action: 'changing textarea', value})\r\n              props.handleTextArea(e);\r\n            }} />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default CreateTweetForm;","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Tweet(props) {\r\n\r\n  let tweet = props.tweet; \r\n  let original = props.tweet.original;\r\n  \r\n  return (\r\n    <Col xs={10} lg={8} className=\"mx-auto border border-success py-3 mb-3\">\r\n      <div className='media'>\r\n        <div className=\"media-body\">\r\n          <h5 className=\"mt-0\">Media heading</h5>\r\n          {tweet.id} == {tweet.content}\r\n\r\n          {original && <div className=\"media mt-3 ml-5 border border-primary p-3 mb-3\">\r\n            <div className=\"media-body\">\r\n              <h5 className=\"mt-0\">Parent Heading</h5>\r\n              {original.content}\r\n            </div>\r\n            <ButtonGroup aria-label=\"Basic example\">\r\n              <StyledButton variant={original.likes.user_liked ? 'info' : 'primary'} onClick={()=>{\r\n                props.handleLikeClick(original.id)\r\n              }}>Like {original.likes.likes}</StyledButton>\r\n              <StyledButton variant=\"success\" onClick={props.handleRetweet.bind(null, original.id)}>Retweet</StyledButton>\r\n            </ButtonGroup>\r\n          </div>}\r\n          \r\n        </div>\r\n        <ButtonGroup aria-label=\"Basic example\">\r\n          <StyledButton variant={tweet.likes.user_liked ? 'info' : 'primary'} onClick={()=>{props.handleLikeClick(tweet.id)}}>Like {tweet.likes.likes}</StyledButton>\r\n          <StyledButton variant=\"success\" onClick={props.handleRetweet.bind(null, tweet.id)}>Retweet</StyledButton>\r\n        </ButtonGroup>\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  // background-color: red; \r\n`\r\n\r\nexport default Tweet;\r\n","import React from 'react';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nfunction Profile(props) {\r\n  let username = props.username;\r\n  console.log(username);\r\n  return (\r\n    <Row>\r\n      <Col xs={10} lg={8} className=\"mx-auto mb-5 px-0 bg-primary\">\r\n        Showing tweets of &gt;&gt; <span className=\"text-white\">{username}</span>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Profile;","import React, {useContext} from 'react';\r\nimport { UserContext } from '../context';\r\n\r\nimport CreateTweetForm from '../components/CreateTweetForm';\r\nimport Tweet from '../components/Tweet';\r\nimport Profile from '../components/Profile';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nfunction Home(props) {\r\n  let {\r\n    dataset, handleLikeClick, \r\n    handleRetweet, handleTweetAdd, \r\n    handleTextArea, value, tweets,\r\n  } = useContext(UserContext);\r\n\r\n  let content = (\r\n    <>\r\n      <Profile username={dataset.username}/>\r\n      {dataset.canTweet === 'true' && \r\n      <CreateTweetForm \r\n        value={value} \r\n        handleTextArea={handleTextArea} \r\n        handleTweetAdd={handleTweetAdd}\r\n      />}\r\n      <Row>\r\n        {tweets.map(tweet => \r\n          <Tweet\r\n            key={tweet.id} \r\n            tweet={tweet} \r\n            handleRetweet={handleRetweet} \r\n            handleLikeClick={handleLikeClick}\r\n          /> \r\n        )}\r\n      </Row>\r\n    </>\r\n  )\r\n\r\n  let login = <div>Hello, thanks for jumping in. Please, consider loging in to see the content!</div>\r\n\r\n  return (\r\n    <Container>\r\n      {dataset.username ? content : login}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, {useContext} from 'react';\r\nimport Tweet from '../components/Tweet';\r\nimport { UserContext } from '../context';\r\n\r\nfunction Detail(props) {\r\n\r\n  let {\r\n    tweets, handleRetweet, \r\n    handleLikeClick,\r\n  } = useContext(UserContext);\r\n\r\n  console.log(tweets[0]);\r\n\r\n  let toRender = tweets.length ? <Tweet\r\n    tweet={tweets[0]} \r\n    handleRetweet={handleRetweet} \r\n    handleLikeClick={handleLikeClick}\r\n  /> : <div>Loading</div>\r\n\r\n  return toRender;\r\n}\r\n\r\nexport default Detail;","import React from 'react';\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div className=\"py-3 bg-warning mb-3\">\r\n      Hello from Navbar\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React, {useContext} from 'react';\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport Navbar from './components/Navbar';\nimport { UserContext } from './context';\n\nfunction App(props) {\n  let {dataset: {page}} = useContext(UserContext); \n  let componentToRender = page === 'detail' ? <Detail /> : <Home />;\n\n  return(\n    <>\n      <Navbar />\n      {componentToRender}\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport UserContextProvider from './context';\n\n// need to get an element first, and pass it to a vatiable\n// to get its dataset values\n// to let context know at what endpoint should it fetch\nlet homePage = document.getElementById('root');\n\nReactDOM.render(\n  <UserContextProvider {...homePage.dataset}>\n    <App />\n  </UserContextProvider>,\n  homePage\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}