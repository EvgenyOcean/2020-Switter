{"version":3,"sources":["context.js","components/Navbar.js","components/CreateTweetForm.js","components/Tweet.js","components/Profile.js","pages/Home.js","pages/Detail.js","pages/Register.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","React","createContext","UserContextProvider","props","state","dataset","username","canTweet","page","tweetId","feedOwner","value","tweets","handleRetweet","bind","handleTweetAdd","handleLikeClick","handleDeleteClick","handleTextArea","endpoint","this","fetch","then","response","ok","json","Error","data","Array","isArray","setState","catch","err","console","log","message","e","preventDefault","content","method","headers","getCookie","body","JSON","stringify","newTweet","id","action","updatingTweet","length","find","tweet","likes","user_liked","original","currentTweet","newLikes","deepStateTweetsCopy","parse","currentTweetAsOriginal","filter","tweetContainsOriginal","target","Provider","children","Component","name","cookieValue","document","cookie","cookies","split","i","trim","substring","decodeURIComponent","Navbar","className","CreateTweetForm","Row","Col","xs","lg","Form","onSubmit","Group","controlId","Label","Control","as","rows","onChange","Button","variant","type","StyledButton","styled","Tweet","href","owner","ButtonGroup","aria-label","onClick","Profile","Home","useContext","map","key","login","Container","Detail","Login","form","FormData","get","autoFocus","required","maxLength","placeholder","Text","autoComplete","App","Register","Boolean","window","location","hostname","match","homePage","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.532a4908.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const UserContext = React.createContext();\r\n\r\nclass UserContextProvider extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      dataset: {\r\n        username: props.username, \r\n        canTweet: props.canTweet,\r\n        page: props.page,\r\n        tweetId: props.tweetId,\r\n        feedOwner: props.feedOwner\r\n      },\r\n      value: '', //maybe later on value will be somewhere else ? \r\n      tweets: [],\r\n    }\r\n    this.handleRetweet = this.handleRetweet.bind(this);\r\n    this.handleTweetAdd = this.handleTweetAdd.bind(this);\r\n    this.handleLikeClick = this.handleLikeClick.bind(this);\r\n    this.handleDeleteClick = this.handleDeleteClick.bind(this);\r\n    this.handleTextArea = this.handleTextArea.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    // so by default im fetching all the tweets\r\n    let endpoint = '/api/tweets';\r\n    // as a better alternative, you could have checked for page here\r\n    if (this.state.dataset.feedOwner){\r\n      // if django passes username\r\n      endpoint += `/?username=${this.state.dataset.feedOwner}`;\r\n    } else if (this.state.dataset.tweetId){\r\n      // if django passes tweetid\r\n      endpoint += `/${this.state.dataset.tweetId}`;\r\n    } else if (this.state.dataset.page === 'home'){\r\n      endpoint += `/?username=${this.state.dataset.username}`;\r\n    }\r\n\r\n    fetch(endpoint)\r\n      .then(response => {\r\n        if (response.ok){\r\n          return response.json()\r\n        } else {\r\n          throw new Error('Something went wrong!');\r\n        }\r\n      })\r\n      .then(data => {\r\n        // the condition below will be met, if detailed view requested a tweet\r\n        if (!Array.isArray(data)){\r\n          this.setState({tweets: [data]});\r\n        } else {\r\n          this.setState({tweets: data});\r\n        };\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message);\r\n      })\r\n  }\r\n\r\n  //basically it's a form, so you could have used FormData\r\n  //but it's just a field, so json is okay\r\n  handleTweetAdd(e){\r\n    e.preventDefault(); \r\n    let data = {content: this.state.value};\r\n    fetch('/api/tweets/add-tweet', {\r\n      method: \"POST\", \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        'X-CSRFToken': getCookie('csrftoken'),\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    }).then(response => {\r\n        if (response.ok){\r\n          return response.json()\r\n        }else{\r\n          throw new Error('Something went wrong!');\r\n        }\r\n      })\r\n      .then(newTweet => {\r\n        let tweets = [newTweet, ...this.state.tweets];\r\n        this.setState({tweets, value: ''});\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  // you need to fix that, cuz when you're retweing someone else's tweets \r\n  // they're prepending to someone else's feed which is bad\r\n  handleRetweet(id){\r\n    let action = 'retweet';\r\n    fetch(`/api/tweets/tweet-action/${id}`, {\r\n      method: \"POST\", \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        'X-CSRFToken': getCookie('csrftoken'),\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({action}), \r\n    }).then(response => {\r\n      if (response.ok){\r\n        return response.json()\r\n      }else {\r\n        throw new Error('something went wrong!');\r\n      }\r\n    }).then(newTweet => {\r\n      // what it means is we need to prepend new retweet only if its user's own feed\r\n      // this is true only if a user on his home page\r\n      if (this.state.dataset.page === 'home'){\r\n        let tweets = [newTweet, ...this.state.tweets];\r\n        this.setState({tweets});\r\n      } else {\r\n        // paste a message that the tweet was retweeted; \r\n        console.log('Tweet was successfully retweeted!');\r\n      }\r\n    }).catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  handleDeleteClick(id){\r\n    let action = 'delete'; \r\n    fetch(`/api/tweets/${id}`, {\r\n      method: \"DELETE\", \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        'X-CSRFToken': getCookie('csrftoken'),\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({action}), \r\n    }).then(response => {\r\n      if (response.ok){\r\n        return response.json()\r\n      }else {\r\n        throw new Error('something went wrong!');\r\n      }\r\n    })\r\n    .then(data => {\r\n      console.log(data);\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  handleLikeClick(id){\r\n    // toDo: I should consider reduce the amount of ifs statements and make a solid single logic\r\n    // works if we have all the tweets in the state\r\n    let action; \r\n    let updatingTweet; \r\n    let theTweet;\r\n    if (this.state.tweets.length > 1){\r\n      // we have many tweets\r\n      // but even though we have many tweets, we could have a retweet\r\n      // which is not in the state, and we need to like the tweet anyway!\r\n\r\n      if (this.state.tweets.find(tweet => tweet.id === id)){\r\n        // maybe we're liking our own tweet\r\n        theTweet = this.state.tweets.find(tweet => tweet.id === id);\r\n        action = theTweet.likes.user_liked ? 'dislike' : 'like';\r\n      } else {\r\n        // otherwise, we're liking one's original tweet\r\n        theTweet = this.state.tweets.find(tweet => {\r\n          if (tweet.original){\r\n            return tweet.original.id === id\r\n          } \r\n          return false;\r\n        });\r\n        action = theTweet.original.likes.user_liked ? 'dislike' : 'like';\r\n      }\r\n\r\n    } else {\r\n      // we have only one tweet in the state\r\n      console.log(id);\r\n\r\n      if (this.state.tweets[0].id === id){\r\n        // liking the main tweet\r\n        action = this.state.tweets[0].likes.user_liked ? 'dislike' : 'like';\r\n        updatingTweet = 'main';\r\n      } else {\r\n        // liking the parent tweet\r\n        action = this.state.tweets[0].original.likes.user_liked ? 'dislike' : 'like';\r\n        updatingTweet = 'original';\r\n      }\r\n    }\r\n\r\n\r\n    fetch(`/api/tweets/tweet-action/${id}`, {\r\n      method: \"POST\", \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        'X-CSRFToken': getCookie('csrftoken'),\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({action}), \r\n    }).then(response => {\r\n      if (response.ok){\r\n        return response.json()\r\n      }else {\r\n        throw new Error('something went wrong!');\r\n      }\r\n    }).then(data => {\r\n      // data => the amount of new likes\r\n      let newLikes = data.likes; \r\n\r\n      // [!] need a deep copy of the state, because we will change the amount of likes right in the object\r\n      let deepStateTweetsCopy = JSON.stringify(this.state.tweets);\r\n      deepStateTweetsCopy = JSON.parse(deepStateTweetsCopy);\r\n\r\n      // if there's only one tweet in the state, there's nothing left to update but itself\r\n      if (this.state.dataset.page === 'detail'){\r\n        if (updatingTweet === 'main'){\r\n          deepStateTweetsCopy[0].likes.likes = newLikes; \r\n          deepStateTweetsCopy[0].likes.user_liked = !deepStateTweetsCopy[0].likes.user_liked; \r\n        } else {\r\n          deepStateTweetsCopy[0].original.likes.likes = newLikes; \r\n          deepStateTweetsCopy[0].original.likes.user_liked = !deepStateTweetsCopy[0].original.likes.user_liked; \r\n        }\r\n        this.setState({tweets: deepStateTweetsCopy})\r\n        return;\r\n      }\r\n\r\n      // find the tweet, likes amount of which, are being changed\r\n      let currentTweet;\r\n      // it can be original tweet itself in one place\r\n      if (deepStateTweetsCopy.find(tweet => tweet.id === id)){\r\n        currentTweet = deepStateTweetsCopy.find(tweet => tweet.id === id);\r\n        //change original tweet's likes\r\n        // console.log(currentTweet);\r\n        currentTweet.likes.likes = newLikes; \r\n        currentTweet.likes.user_liked = !currentTweet.likes.user_liked;\r\n\r\n        // I have to check if the tweet is also somewhere else on the page: \r\n        let currentTweetAsOriginal = deepStateTweetsCopy.filter(tweet => {\r\n          if (tweet.original){\r\n            return tweet.original.id === id;\r\n          };\r\n          return false;\r\n        });\r\n\r\n        // if there're any\r\n        if (currentTweetAsOriginal){\r\n          for (let tweetContainsOriginal of currentTweetAsOriginal){\r\n            tweetContainsOriginal.original.likes.likes = newLikes; \r\n            tweetContainsOriginal.original.likes.user_liked = !tweetContainsOriginal.original.likes.user_liked; \r\n          }\r\n        }\r\n      } else {\r\n        // or it can be found at .original in multiple places\r\n        let currentTweetAsOriginal = deepStateTweetsCopy.filter(tweet => {\r\n          if (tweet.original){\r\n            return tweet.original.id === id;\r\n          };\r\n          return false;\r\n        });\r\n\r\n        // if there're any\r\n        if (currentTweetAsOriginal){\r\n          for (let tweetContainsOriginal of currentTweetAsOriginal){\r\n            tweetContainsOriginal.original.likes.likes = newLikes; \r\n            tweetContainsOriginal.original.likes.user_liked = !tweetContainsOriginal.original.likes.user_liked; \r\n          }\r\n        }\r\n      }\r\n    \r\n      // finally, rerendering the updated tweets\r\n      this.setState({tweets: deepStateTweetsCopy})\r\n    }).catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  handleTextArea(e){\r\n    let value = e.target.value; \r\n    this.setState({value});\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      // so, basically value={{...this.state}} doesn't make a deep copy, \r\n      // but the good thing is Im not changing state anywhere else but here\r\n      <UserContext.Provider \r\n        value={{\r\n          ...this.state, \r\n          handleLikeClick: this.handleLikeClick, \r\n          handleTweetAdd: this.handleTweetAdd, \r\n          handleRetweet: this.handleRetweet, \r\n          handleTextArea: this.handleTextArea,\r\n          handleDeleteClick: this.handleDeleteClick,\r\n        }}\r\n      >\r\n\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserContextProvider;\r\n\r\n\r\n// OTHER FUNCTIONS, ALSO GOOD FOR UTILS AND STUFF\r\nfunction getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n          const cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}","import React from 'react';\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div className=\"py-3 bg-warning mb-3\">\r\n      Hello from Navbar\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\nfunction CreateTweetForm(props) {\r\n  let value = props.value; \r\n  return (\r\n    <Row>\r\n      <Col xs={10} lg={8} className=\"mx-auto mb-5 px-0\">\r\n        <Form onSubmit={props.handleTweetAdd}>\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>Create New Tweet:</Form.Label>\r\n            <Form.Control as=\"textarea\" rows=\"3\" value={value} onChange={(e)=>{\r\n              props.handleTextArea(e);\r\n            }} />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default CreateTweetForm;","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Tweet(props) {\r\n  // This component needs: \r\n  // 1. dataset\r\n  // 2. tweet itself\r\n  // 3. handleRetweet, handleLikeClick\r\n  // 4. handleDeleteClick\r\n\r\n  let dataset = props.dataset; \r\n  let tweet = props.tweet; \r\n  let original = props.tweet.original;\r\n  \r\n  return (\r\n    <Col xs={10} lg={8} className=\"mx-auto border border-success py-3 mb-3\">\r\n      <div className='media'>\r\n        <div className=\"media-body\">\r\n          <div>\r\n            <a href={'/' + tweet.owner} className=\"mt-0 text-info\">{tweet.owner}</a>\r\n          </div>\r\n          {tweet.id} == {tweet.content}\r\n\r\n          {original && <div className=\"media mt-3 ml-5 border border-primary p-3 mb-3\">\r\n            <div className=\"media-body\">\r\n              <div>\r\n                <a href={'/' + original.owner} className=\"mt-0 text-info\">{original.owner}</a>\r\n              </div>\r\n              {original.content}\r\n            </div>\r\n            <ButtonGroup aria-label=\"Basic example\">\r\n              <StyledButton variant={original.likes.user_liked ? 'info' : 'primary'} onClick={()=>{\r\n                props.handleLikeClick(original.id)\r\n              }}>Like {original.likes.likes}</StyledButton>\r\n              <StyledButton variant=\"success\" onClick={props.handleRetweet.bind(null, original.id)}>Retweet</StyledButton>\r\n              {(dataset.page === 'home' || dataset.page === 'user') && <a href={'/' + tweet.original.id} className=\"btn btn-outline-info\">Comments</a>}\r\n            </ButtonGroup>\r\n          </div>}    \r\n        </div>\r\n        <ButtonGroup aria-label=\"Basic example\">\r\n          <StyledButton variant={tweet.likes.user_liked ? 'info' : 'primary'} onClick={()=>{props.handleLikeClick(tweet.id)}}>Like {tweet.likes.likes}</StyledButton>\r\n          <StyledButton variant=\"success\" onClick={props.handleRetweet.bind(null, tweet.id)}>Retweet</StyledButton>\r\n          {(dataset.page === 'home' || dataset.page === 'user') && <a href={'/' + tweet.id} className=\"btn btn-outline-info\">Commments</a>}\r\n          {(dataset.page === 'detail') && (tweet.owner === dataset.username) && <StyledButton variant=\"danger\" onClick={props.handleDeleteClick.bind(null, tweet.id)}>Delete</StyledButton>}\r\n        </ButtonGroup>\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  // background-color: red; \r\n`\r\n\r\nexport default Tweet;\r\n","import React from 'react';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nfunction Profile(props) {\r\n  let username = props.dataset.feedOwner || props.dataset.username;\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs={10} lg={8} className=\"mx-auto mb-5 px-0 bg-primary\">\r\n        Showing tweets of &gt;&gt; <span className=\"text-white\">{username}</span>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Profile;","import React, {useContext} from 'react';\r\nimport { UserContext } from '../context';\r\n\r\nimport CreateTweetForm from '../components/CreateTweetForm';\r\nimport Tweet from '../components/Tweet';\r\nimport Profile from '../components/Profile';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nfunction Home(props) {\r\n  let {\r\n    dataset, handleLikeClick, \r\n    handleRetweet, handleTweetAdd, \r\n    handleTextArea, value, tweets,\r\n  } = useContext(UserContext);\r\n\r\n  let content = (\r\n    <>\r\n      <Profile dataset={dataset}/>\r\n      {dataset.canTweet === 'true' && \r\n      <CreateTweetForm \r\n        value={value} \r\n        handleTextArea={handleTextArea} \r\n        handleTweetAdd={handleTweetAdd}\r\n      />}\r\n      <Row>\r\n        {tweets.map(tweet => \r\n          <Tweet\r\n            key={tweet.id} \r\n            tweet={tweet} \r\n            handleRetweet={handleRetweet} \r\n            handleLikeClick={handleLikeClick}\r\n            dataset={dataset}\r\n          /> \r\n        )}\r\n      </Row>\r\n    </>\r\n  )\r\n\r\n  let login = <div>Hello, thanks for jumping in. Please, consider loging in to see the content!</div>\r\n\r\n  return (\r\n    <Container>\r\n      {dataset.username ? content : login}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, {useContext} from 'react';\r\nimport Tweet from '../components/Tweet';\r\nimport { UserContext } from '../context';\r\n\r\nfunction Detail(props) {\r\n\r\n  let {\r\n    dataset, tweets, handleRetweet, \r\n    handleLikeClick, handleDeleteClick,\r\n  } = useContext(UserContext);\r\n\r\n  let toRender = tweets.length ? <Tweet\r\n    tweet={tweets[0]} \r\n    handleRetweet={handleRetweet} \r\n    handleLikeClick={handleLikeClick}\r\n    handleDeleteClick={handleDeleteClick}\r\n    dataset={dataset}\r\n  /> : <div>Loading</div>\r\n\r\n  return toRender;\r\n}\r\n\r\nexport default Detail;","import React from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Login(props) {\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); \r\n    let form = e.target; \r\n    let data = new FormData(form); \r\n    console.log(data.get('username'));\r\n    fetch('register', {\r\n      method: 'POST', \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n      },\r\n      body: form,\r\n    })\r\n      .then(response => {\r\n        if (response.ok){\r\n          console.log('probably worked fine!');\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"formBasicUsername\">\r\n          <Form.Label>Username</Form.Label>\r\n          <Form.Control type=\"text\" autoFocus required name=\"username\" maxLength=\"150\" placeholder=\"Enter username\" />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control type=\"email\" name=\"email\" required placeholder=\"Enter email\" />\r\n          <Form.Text className=\"text-muted\">\r\n            We'll never share your email with anyone else.\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control type=\"password\" name=\"password1\" autoComplete=\"new-password\" required placeholder=\"Password\" />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicPassword2\">\r\n          <Form.Label>Confirm Password</Form.Label>\r\n          <Form.Control type=\"password\" name=\"password2\" required placeholder=\"Confirm Password\" />\r\n        </Form.Group>\r\n\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Login;","import React, {useContext} from 'react';\nimport { UserContext } from './context';\nimport Navbar from './components/Navbar';\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport Register from './pages/Register';\n\nfunction App(props) {\n  let {dataset: {page}} = useContext(UserContext); \n\n  return(\n    <>\n      <Navbar />\n      {page === 'detail' && <Detail />}\n      {page === 'home' && <Home />}\n      {page === 'register' && <Register />}\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport UserContextProvider from './context';\n\n// need to get an element first, and pass it to a vatiable\n// to get its dataset values\n// to let context know at what endpoint should it fetch\nlet homePage = document.getElementById('root');\n\nconsole.log(homePage);\n// homePage will be null if it's login or register\n// cuz django handles registration and login just yet\nif (homePage){\n  ReactDOM.render(\n    // we should consider moving context to the App, cuz there're some component\n    // which don't need the context value at all\n    <UserContextProvider {...homePage.dataset}>\n      <App />\n    </UserContextProvider>,\n    homePage\n  );\n}\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}