{"version":3,"sources":["components/Tweet.js","components/Feed.js","components/CreateTweetForm.js","pages/Home.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["StyledButton","styled","Button","Tweet","props","useState","tweet","likes","user_liked","userLiked","Col","xs","lg","className","id","content","ButtonGroup","aria-label","variant","onClick","Feed","Row","tweets","map","el","key","CreateTweetForm","value","setValue","Form","onSubmit","handleTweetAdd","bind","Group","controlId","Label","Control","as","rows","onChange","e","target","type","Home","setTweets","useEffect","fetch","then","response","ok","json","Error","data","console","log","catch","err","message","Container","preventDefault","tempTweet","prevState","Navbar","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"qXAoCA,IAAMA,EAAeC,YAAOC,IAAPD,CAAH,KAIHE,EAhCf,SAAeC,GAAQ,IAAD,EACcC,mBAASD,EAAME,MAAMC,MAAMC,YADzC,mBACbC,EADa,aAEMJ,mBAASD,EAAME,MAAMC,MAAMA,QAFjC,mBAEbA,EAFa,KAiBpB,OAjBoB,KAkBlB,kBAACG,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,UAAU,2CAC3BT,EAAME,MAAMQ,GADf,MACsBV,EAAME,MAAMS,QAChC,kBAACC,EAAA,EAAD,CAAaC,aAAW,iBACtB,kBAACjB,EAAD,CAAckB,QAAST,EAAY,OAAS,UAAWU,QAdrC,WAClBf,EAAME,MAAMC,MAAMC,aAalB,QAAuFD,GACvF,kBAACP,EAAD,CAAckB,QAAQ,WAAtB,c,QChBOE,MATf,SAAchB,GAEZ,OACE,kBAACiB,EAAA,EAAD,KACGjB,EAAMkB,OAAOC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAOC,IAAKD,EAAGV,GAAIR,MAAOkB,S,OCuBzCE,MAxBf,SAAyBtB,GAAQ,IAAD,EACJC,mBAAS,IADL,mBACvBsB,EADuB,KAChBC,EADgB,KAO9B,OACE,kBAACP,EAAA,EAAD,KACE,kBAACX,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,UAAU,qBAC5B,kBAACgB,EAAA,EAAD,CAAMC,SAAU1B,EAAM2B,eAAeC,KAAK,KAAML,IAC9C,kBAACE,EAAA,EAAKI,MAAN,CAAYC,UAAU,gCACpB,kBAACL,EAAA,EAAKM,MAAN,0BACA,kBAACN,EAAA,EAAKO,QAAN,CAAcC,GAAG,WAAWC,KAAK,IAAIX,MAAOA,EAAOY,SAVpC,SAACC,GACxBZ,EAASY,EAAEC,OAAOd,WAWZ,kBAACzB,EAAA,EAAD,CAAQgB,QAAQ,UAAUwB,KAAK,UAA/B,c,QC4BKC,MA7Cf,SAAcvC,GAAQ,IAAD,EAESC,mBAAS,IAFlB,mBAEZiB,EAFY,KAEJsB,EAFI,KAqCnB,OAjCAC,qBAAU,WACRC,MAAM,eACHC,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,4BAGnBJ,MAAK,SAAAK,GACJC,QAAQC,IAAIF,GACZR,EAAUQ,MAEXG,OAAM,SAAAC,GACLH,QAAQC,IAAIE,EAAIC,cAEnB,IAkBD,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAiB3B,eAjBE,SAACJ,EAAOa,GAC7Ba,QAAQC,IAAI3B,GACZa,EAAEmB,iBAEF,IAAIC,EAAY,CACd7C,QAASY,EACTb,GAAI,IACJP,MAAO,CACLA,MAAO,GACPC,YAAY,IAGhBoC,GAAU,SAAAiB,GAAS,OAAKD,GAAL,mBAAmBC,UAMpC,kBAAC,EAAD,CAAMvC,OAAQA,MCpCLwC,MARf,SAAgB1D,GACd,OACE,yBAAKS,UAAU,wBAAf,sBCUWkD,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLzB,QAAQyB,MAAMA,EAAMrB,c","file":"static/js/main.c6e8c6a3.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Tweet(props) {\r\n  const [userLiked, setUserLiked] = useState(props.tweet.likes.user_liked);\r\n  const [likes, setLikes] = useState(props.tweet.likes.likes);\r\n\r\n  //feature toDo: \r\n  //1. If user liked the tweet => change tweet color and next action to dislike \r\n  //2. If user is not register => configure backend handling it\r\n  const handleLikeClick = () => {\r\n    if (props.tweet.likes.user_liked){\r\n      //fetch with dislike action\r\n      //setLikes + 1\r\n    } else {\r\n      //fetch to like action\r\n      //setLikes - 1\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Col xs={10} lg={8} className=\"mx-auto border border-primary py-3 mb-3\">\r\n      {props.tweet.id} = {props.tweet.content}\r\n      <ButtonGroup aria-label=\"Basic example\">\r\n        <StyledButton variant={userLiked ? 'info' : 'primary'} onClick={handleLikeClick}>Like {likes}</StyledButton>\r\n        <StyledButton variant=\"success\">Retweet</StyledButton>\r\n      </ButtonGroup>\r\n    </Col>\r\n  );\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  // background-color: red; \r\n`\r\n\r\nexport default Tweet;\r\n","import React from 'react';\r\nimport Tweet from './Tweet';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nfunction Feed(props) {\r\n\r\n  return (\r\n    <Row>\r\n      {props.tweets.map(el => <Tweet key={el.id} tweet={el} />)}\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Feed;","import React, {useState} from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\nfunction CreateTweetForm(props) {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleTextChange = (e) => {\r\n    setValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs={10} lg={8} className=\"mx-auto mb-5 px-0\">\r\n        <Form onSubmit={props.handleTweetAdd.bind(null, value)}>\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>Create New Tweet:</Form.Label>\r\n            <Form.Control as=\"textarea\" rows=\"3\" value={value} onChange={handleTextChange} />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default CreateTweetForm;","import React, {useState, useEffect} from 'react';\r\nimport Feed from '../components/Feed';\r\nimport CreateTweetForm from '../components/CreateTweetForm';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction Home(props) {\r\n\r\n  const [tweets, setTweets] = useState([]); \r\n\r\n  useEffect(() => {\r\n    fetch('/api/tweets')\r\n      .then(response => {\r\n        if (response.ok){\r\n          return response.json()\r\n        } else {\r\n          throw new Error('Something went wrong!');\r\n        }\r\n      })\r\n      .then(data => {\r\n        console.log(data);\r\n        setTweets(data);\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message);\r\n      })\r\n  }, [])\r\n\r\n  const handleTweetAdd = (value, e) => {\r\n    console.log(value);\r\n    e.preventDefault(); \r\n    // one server response is ok \r\n    let tempTweet = {\r\n      content: value, \r\n      id: 123, \r\n      likes: {\r\n        likes: 15, \r\n        user_liked: false,\r\n      }\r\n    }\r\n    setTweets(prevState => [tempTweet ,...prevState])\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <CreateTweetForm handleTweetAdd={handleTweetAdd}/>\r\n      <Feed tweets={tweets}/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div className=\"py-3 bg-warning mb-3\">\r\n      Hello from Navbar\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport Home from './pages/Home';\nimport Navbar from './components/Navbar';\n\n\nfunction App() {\n  return(\n    <>\n      <Navbar />\n      <Home />\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}