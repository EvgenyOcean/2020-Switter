{"version":3,"sources":["components/CreateTweetForm.js","components/Tweet.js","pages/Home.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["CreateTweetForm","props","value","dispatch","Row","Col","xs","lg","className","Form","onSubmit","handleTweetAdd","Group","controlId","Label","Control","as","rows","onChange","e","target","action","Button","variant","type","StyledButton","styled","Tweet","tweet","original","id","content","ButtonGroup","aria-label","likes","user_liked","onClick","handleLikeClick","handleRetweet","bind","Home","useReducer","state","payload","tweets","newTweet","Error","useEffect","fetch","then","response","ok","json","data","catch","err","console","log","message","method","headers","body","JSON","stringify","find","newLikes","deepStateTweetsCopy","currentTweet","parse","tweetsContainsOriginal","filter","tweetContainsOriginal","Container","preventDefault","map","key","Navbar","App","Boolean","window","location","hostname","match","el","document","getElementById","ReactDOM","render","dataset","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d1367726.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\nfunction CreateTweetForm(props) {\r\n  let value = props.value; \r\n  let dispatch = props.dispatch;\r\n  return (\r\n    <Row>\r\n      <Col xs={10} lg={8} className=\"mx-auto mb-5 px-0\">\r\n        <Form onSubmit={props.handleTweetAdd}>\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>Create New Tweet:</Form.Label>\r\n            <Form.Control as=\"textarea\" rows=\"3\" value={value} onChange={(e)=>{\r\n              let value = e.target.value; \r\n              dispatch({action: 'changing textarea', value})\r\n            }} />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default CreateTweetForm;","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Tweet(props) {\r\n\r\n  let tweet = props.tweet; \r\n  let original = props.tweet.original;\r\n\r\n  return (\r\n    <Col xs={10} lg={8} className=\"mx-auto border border-success py-3 mb-3\">\r\n      <div className='media'>\r\n        <div className=\"media-body\">\r\n          <h5 className=\"mt-0\">Media heading</h5>\r\n          {tweet.id} == {tweet.content}\r\n\r\n          {original && <div className=\"media mt-3 ml-5 border border-primary p-3 mb-3\">\r\n            <div className=\"media-body\">\r\n              <h5 className=\"mt-0\">Parent Heading</h5>\r\n              {original.content}\r\n            </div>\r\n            <ButtonGroup aria-label=\"Basic example\">\r\n              <StyledButton variant={original.likes.user_liked ? 'info' : 'primary'} onClick={()=>{\r\n                props.handleLikeClick(original.id)\r\n              }}>Like {original.likes.likes}</StyledButton>\r\n              <StyledButton variant=\"success\" onClick={props.handleRetweet.bind(null, original.id)}>Retweet</StyledButton>\r\n            </ButtonGroup>\r\n          </div>}\r\n          \r\n        </div>\r\n        <ButtonGroup aria-label=\"Basic example\">\r\n          <StyledButton variant={tweet.likes.user_liked ? 'info' : 'primary'} onClick={()=>{props.handleLikeClick(tweet.id)}}>Like {tweet.likes.likes}</StyledButton>\r\n          <StyledButton variant=\"success\" onClick={props.handleRetweet.bind(null, tweet.id)}>Retweet</StyledButton>\r\n        </ButtonGroup>\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  // background-color: red; \r\n`\r\n\r\nexport default Tweet;\r\n","import React, {useEffect, useReducer} from 'react';\r\nimport CreateTweetForm from '../components/CreateTweetForm';\r\nimport Tweet from '../components/Tweet';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction Home(props) {\r\n  //[state] - initstate or sth that dispatch returns \r\n  //[dispatch] - function with different actions depending on passed attributes. Returns new state! Its parameters: state - prevState, payload - anything you pass as an object to the function. \r\n  //probably causes extra rerender when initstate is being initialized...\r\n  const [state, dispatch] = useReducer((state, payload)=>{\r\n    let tweets;\r\n    switch(payload.action){\r\n      case 'fetching tweets': \r\n        return {...state, tweets: payload.tweets};\r\n      case 'changing textarea': \r\n        return {...state, value: payload.value};\r\n      case 'adding new tweet':\r\n        tweets = [payload.newTweet, ...state.tweets];\r\n        return {value: '', tweets};\r\n      case 'retweeting': \r\n        tweets = [payload.newTweet, ...state.tweets];\r\n        return {...state, tweets};\r\n      default: \r\n        throw new Error('What are you doing?');\r\n    }\r\n  }, {value: \"\", tweets: []})\r\n\r\n  useEffect(() => {\r\n    fetch('/api/tweets')\r\n      .then(response => {\r\n        if (response.ok){\r\n          return response.json()\r\n        } else {\r\n          throw new Error('Something went wrong!');\r\n        }\r\n      })\r\n      .then(data => {\r\n        dispatch({action: 'fetching tweets', tweets: data});\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message);\r\n      })\r\n  }, [])\r\n\r\n  //basically it's a form, so you could have used FormData\r\n  //but it's just a field, so json is okay\r\n  const handleTweetAdd = (e) => {\r\n    let data = {content: state.value};\r\n    e.preventDefault(); \r\n    fetch('/api/tweets/add-tweet', {\r\n      method: \"POST\", \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        // some csrf token later on? \r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    }).then(response => {\r\n        if (response.ok){\r\n          return response.json()\r\n        }else{\r\n          throw new Error('Something went wrong!');\r\n        }\r\n      })\r\n      .then(newTweet => {\r\n        dispatch({action: 'adding new tweet', newTweet});\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  const handleRetweet = (id) => {\r\n    let action = 'retweet';\r\n    fetch(`/api/tweets/tweet-action/${id}`, {\r\n      method: \"POST\", \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        // some csrf token later on? \r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({action}), \r\n    }).then(response => {\r\n      if (response.ok){\r\n        return response.json()\r\n      }else {\r\n        throw new Error('something went wrong!');\r\n      }\r\n    }).then(newTweet => {\r\n      dispatch({action: 'retweeting', newTweet});\r\n    }).catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  const handleLikeClick = (id) => {\r\n    let action = state.tweets.find(tweet => tweet.id === id).likes.user_liked ? 'dislike' : 'like';\r\n    fetch(`/api/tweets/tweet-action/${id}`, {\r\n      method: \"POST\", \r\n      headers: {\r\n        'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        // some csrf token later on? \r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({action}), \r\n    }).then(response => {\r\n      if (response.ok){\r\n        return response.json()\r\n      }else {\r\n        throw new Error('something went wrong!');\r\n      }\r\n    }).then(data => {\r\n      // data => the amount of new likes\r\n      let newLikes = data.likes; \r\n\r\n      // [!] need a deep copy of the state, because we will change the amount of likes right in the object\r\n      let deepStateTweetsCopy = JSON.stringify(state.tweets);\r\n      deepStateTweetsCopy = JSON.parse(deepStateTweetsCopy);\r\n      // find the tweet, likes amount of which, are being changed\r\n      let currentTweet = deepStateTweetsCopy.find(tweet => tweet.id === id);\r\n\r\n      // changing original tweet\r\n      currentTweet.likes.likes = newLikes; \r\n      currentTweet.likes.user_liked = !currentTweet.likes.user_liked;\r\n\r\n      // but that's not it, cuz above we just handle the original tweet like changing, but what if that tweet was retweeted, then the tweet also can be found at a_tweet.original and we need to update the UI there as well; anyway the id is the same, so it's easy to do:\r\n      let tweetsContainsOriginal = deepStateTweetsCopy.filter(tweet => {\r\n        if (tweet.original){\r\n          return tweet.original.id === id;\r\n        }\r\n      });\r\n\r\n      // oh yeah... it can be retweeted multiple times, so changing it everywhere; \r\n      if (tweetsContainsOriginal){\r\n        for (let tweetContainsOriginal of tweetsContainsOriginal){\r\n          tweetContainsOriginal.original.likes.likes = newLikes; \r\n          tweetContainsOriginal.original.likes.user_liked = !tweetContainsOriginal.original.likes.user_liked; \r\n        }\r\n      }\r\n\r\n      // finally, rerendering the updated tweets\r\n      dispatch({action: 'fetching tweets', tweets: deepStateTweetsCopy});\r\n\r\n    }).catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <CreateTweetForm dispatch={dispatch} value={state.value} handleTweetAdd={handleTweetAdd}/>\r\n      {state.tweets.map(tweet => <Tweet key={tweet.id} tweet={tweet} handleRetweet={handleRetweet} handleLikeClick={handleLikeClick}/> // handleRetweet is a good idea for HOC maybe...\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div className=\"py-3 bg-warning mb-3\">\r\n      Hello from Navbar\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport Home from './pages/Home';\nimport Navbar from './components/Navbar';\n\n\nfunction App(props) {\n  console.log(props);\n  return(\n    <>\n      <Navbar />\n      <Home />\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet el = document.getElementById('root');\n\nReactDOM.render(\n  <App {...el.dataset}/>,\n  el\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}